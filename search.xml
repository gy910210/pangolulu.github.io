<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Huffman Tree (use priority queue) in C++]]></title>
      <url>http://pangolulu.github.io/2016/01/09/Huffman-Tree-use-priority-queue-in-C/</url>
      <content type="html"><![CDATA[<p>Use the priority queue to implement Huffman Tree, written in C++ and use STL.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">struct</span> Node * left;</div><div class="line">    <span class="keyword">struct</span> Node * right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node * p_Node;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> cmp</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(p_Node <span class="keyword">const</span> &amp;p1, p_Node <span class="keyword">const</span> &amp;p2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> p1-&gt;val &gt; p2-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">p_Node <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> val, p_Node left, p_Node right)</span></span></div><div class="line">&#123;</div><div class="line">    p_Node node = (p_Node)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    node-&gt;val = val;</div><div class="line">    node-&gt;left = left;</div><div class="line">    node-&gt;right = right;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">p_Node <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> * vec, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    priority_queue&lt;p_Node, <span class="built_in">vector</span>&lt;p_Node&gt;, cmp&gt; forest;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        p_Node node = createNode(vec[i], <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        forest.push(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(forest.size() &gt; <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        p_Node node1 =  forest.top();</div><div class="line">        forest.pop();</div><div class="line">        p_Node node2 =  forest.top();</div><div class="line">        forest.pop();</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;node1-&gt;val&lt;&lt;<span class="string">"  "</span>&lt;&lt;node2-&gt;val&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        p_Node new_node = createNode(node1-&gt;val + node2-&gt;val, node1, node2);</div><div class="line">        forest.push(new_node);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> forest.top();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
