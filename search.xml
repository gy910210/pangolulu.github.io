<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Deep Learning for Information Retrieval]]></title>
      <url>http://pangolulu.github.io/2016/10/28/deep-ir/</url>
      <content type="html"><![CDATA[<p>最近关注了一些Deep Learning在Information Retrieval领域的应用，得益于Deep Model在对文本的表达上展现的优势（比如RNN和CNN），我相信在IR的领域引入Deep Model也会取得很好的效果。</p>
<p>IR的范围可能会很广，比如传统的Search Engine，Recommendation System或者Question Answering（retrieval based）可能都可以属于IR的范畴。仔细考虑这些应用，不难看出他们都存在一个模式，也就是几个基本需要解决的任务：</p>
<ol>
<li>Query（Intent）的表达和Document（Content）的表达？</li>
<li>Matching Model：maps query-document pairs to a feature vector representation where each component reflects a certain type of similarity, e.g., lexical, syntactic, and semantic。或者这里根据matching vector与参数w直接得到matching score，相当于做了内积。</li>
<li>Ranking Model：接受q-d的matching结果（matching vector或matching score），在当前end-to-end的训练框架下，其实使用matching score更方便一点（为什么更方便一点本文后面会说明），然后使用learning to rank的方法（pointwise，pairwise或listwise）来进行训练，重点是如何设计loss function。</li>
</ol>
<p>下面我主要参考Li Hang在sigir 2016上的tutorial（<a href="http://t.cn/Rt7OK2w" target="_blank" rel="external">http://t.cn/Rt7OK2w</a>）来组织我的笔记，同时会重点阅读几篇有代表性的论文来更好的理解细节。一句话，希望学习可以既见森林，又可见树木。</p>
<p>我主要从以下四个部分来讲解：</p>
<ol>
<li>IR的基础</li>
<li>相关的Deep Learning模型（Word Embedding，RNN和CNN）</li>
<li>Deep Learning for IR的基础性问题</li>
<li>Deep Learning for IR的具体应用</li>
</ol>
<h2 id="IR的基础"><a href="#IR的基础" class="headerlink" title="IR的基础"></a>IR的基础</h2><p>下图展现了Information Retrieval的一个整体构架，</p>
<p><img src="/assets/img/dl-ir/Overview_of_Information_Retrieval.png" alt="IR"></p>
<p>传统的IR使用向量空间模型（VSM）来计算query和document的相似度，具体方法如下：</p>
<ul>
<li>Representing query and document as tf-idf (or BM25) vectors</li>
<li>Calculating cosine similarity between them</li>
</ul>
<p><img src="/assets/img/dl-ir/Approach_in_Traditional_IR.png" alt="IR"></p>
<p>现代的IR使用了一个更加general的框架来处理similarity的问题：</p>
<ul>
<li>Conducting query and document understanding</li>
<li>Representing query and document as feature vectors</li>
<li>Calculating multiple matching scores between query and document (Matching Model)</li>
<li>Training ranker with matching scores as features using learning to rank (Ranking Model)</li>
</ul>
<p><img src="/assets/img/dl-ir/Approach_in_Modern_IR.png" alt="IR"></p>
<p>一般这四个步骤都是在一个end-to-end的神经网络结构下进行训练的。这里注意，Matching Model只有唯一一个，Ranking Model只使用这唯一一个Matching Model。</p>
<p>Deep Learning的方法可以渗透在IR中的不同步骤中，如下图所示，一般包括了Intent和Content的表示和Matching Model的学习。</p>
<p><img src="/assets/img/dl-ir/Deep_Learning_and_IR.png" alt="IR"></p>
<p>注意，这里并没有说明Ranking Model，其实Ranking Model可以看做整个神经网络结构的loss function层，不同的learning to rank方法有不同的loss形式，本文只讨论pointwise和pairwise方法，因为这两种方法效率足够高，在实践中应用的最多。</p>
<p>同时，本文重点考察两种工业中应用最多的训练数据形式。</p>
<ol>
<li>第一种形式，数据提供了某个query对应的完全的document的排序（或relevance值）；</li>
<li>第二种形式，数据只提供了某个query对应的一个或几个相关document，其他document并不知道相关性，具体类似推荐系统的数据。</li>
</ol>
<p>其实，在工业环境中第二种数据形式是最普遍的，由于本身只有正样本，所以需要进行随机负采样，来构造一种排序关系。同时loss function也可以使用pointwise或pairwise的方法，pointwise方法直接把问题当做二分类问题来做；pairwise使用了正样本和每个负样本的偏序关系，可以使用RankSVM的形式（hinge loss）或RankNet的形式（cross entropy loss）。</p>
<h2 id="相关Deep-Learning模型的基础"><a href="#相关Deep-Learning模型的基础" class="headerlink" title="相关Deep Learning模型的基础"></a>相关Deep Learning模型的基础</h2><h3 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h3><p>Word Embedding的教程可以参考《word2vec中的数学原理详解》，我觉得这篇文章讲的很详细也很生动。</p>
<h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><p>RNN的教程可以参考我之前写的tutorial <a href="https://github.com/pangolulu/rnn-from-scratch" target="_blank" rel="external">https://github.com/pangolulu/rnn-from-scratch</a>，其中也包含了很多拓展的资料。</p>
<h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>CNN for text可以参考这篇论文<a href="https://arxiv.org/pdf/1408.5882v2.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1408.5882v2.pdf</a>，他将CNN模型应用到了sentence classification的问题上，并取得了state-of-art的效果。</p>
<h2 id="Deep-Learning-for-IR的基础性问题"><a href="#Deep-Learning-for-IR的基础性问题" class="headerlink" title="Deep Learning for IR的基础性问题"></a>Deep Learning for IR的基础性问题</h2><h3 id="Representation-Learning"><a href="#Representation-Learning" class="headerlink" title="Representation Learning"></a>Representation Learning</h3><p>Word Embedding的出现使得我们可以使用低维的向量空间来表示Word的语义，避免了使用one-hot表示产生了一些问题，比如维度高、one-hot词向量间无法表达相关性等等。这种embedding的方法称为hierarchy representation。</p>
<p>那么，如何将一段文本表示成embedding的形式呢？也就是sentence representation或document representation，目的是represent syntax, semantics, and even pragmatics of sentences。目前有很多研究工作可以应用，对于sentence的表示可以使用rnn或cnn，对于document的表示会复杂一点，可以参考<code>Hierarchical Attention Networks for Document Classification</code>和<code>Convolutional Neural Network Architectures for Matching Natural Language Sentences</code>这两篇工作。它们主要的思想其实就是使用cnn或rnn来表示document中的sentences，然后使用表示好的sentence vectors作为另外的rnn的输入来最终表示整个document。</p>
<p>一般CNN或RNN会随着整个网络进行end-to-end的训练，也就是Task-dependent的，也是有监督的。</p>
<p>Representation Learning是整个IR或NLP task的基础，无论是Classification的问题，Matching的问题，还是Translation的问题，都需要先学习一个document或sentence的中间表示。可以看下面的示意图，表示IR或NLP不同任务之间的关系，和representation learning所处的位置。</p>
<p><img src="/assets/img/dl-ir/representation_learning.png" alt="IR"></p>
<h3 id="Matching-Model"><a href="#Matching-Model" class="headerlink" title="Matching Model"></a>Matching Model</h3><p>Matching是IR任务中重要的一步，意义是maps query-document pairs to a feature vector representation where each component reflects a certain type of similarity, e.g., lexical, syntactic, and semantic。这里产生的是一个matching vector，接下来可以根据matching vector与参数w直接得到matching score（比如做内积）。</p>
<p><img src="/assets/img/dl-ir/matching_model.png" alt="IR"></p>
<p>Maching Model产生的结果（matching vector或matching score）接下来会作为ranking model的输入，ranking model其实相当于整个网络的loss function，在当前end-to-end的训练框架下，其实使用matching score更方便一点。之后可以看到，使用<code>matching vector + LTR</code>的方法和使用<code>maching score + ranking loss</code>的方法一定程度上是等价的（这里只考虑pointwise和pairwise方法），而且后面一种形式更加general，它包含了传统的LTR的表达，也可以做一些变化，比如做一些negative sampling等等。之后在Ranking Model的讲解会重点介绍几篇论文中常见的ranking loss的形式，并且说明一下LTR方法使用matching vector和使用matching score的等价性。</p>
<p>好，现在我们重点讲解使用深度学习来做Matching的方法。一般Matching的方法有三种形式：</p>
<ol>
<li>Projection to Latent Space</li>
<li>One Dimensional Matching</li>
<li>Two Dimensional Matching</li>
<li>Tree Matching</li>
</ol>
<p>本文暂时只讨论前三种。</p>
<h4 id="Matching-Projection-to-Latent-Space"><a href="#Matching-Projection-to-Latent-Space" class="headerlink" title="Matching: Projection to Latent Space"></a>Matching: Projection to Latent Space</h4><p>类似于VSM的方法</p>
<p><img src="/assets/img/dl-ir/Projection_to_Latent_Space.png" alt="IR"></p>
<h4 id="Matching-One-Dimensional-Matching"><a href="#Matching-One-Dimensional-Matching" class="headerlink" title="Matching: One Dimensional Matching"></a>Matching: One Dimensional Matching</h4><p>应用的比较多，可以在这个基础上融合不同的matching方法得到的结果，比如融入了第一种matching方法（query和document的vector做内积）。</p>
<p><img src="/assets/img/dl-ir/One_Dimensional_Matching.png" alt="IR"></p>
<h4 id="Matching-Two-Dimensional-Matching"><a href="#Matching-Two-Dimensional-Matching" class="headerlink" title="Matching: Two Dimensional Matching"></a>Matching: Two Dimensional Matching</h4><p>直接生成二维的matching score，然后用cnn模型进行学习。</p>
<p><img src="/assets/img/dl-ir/Two_Dimensional_Matching.png" alt="IR"></p>
<p>有一些研究的结论，如下：</p>
<ul>
<li>对于sentence的表示学习，cnn方法要比rnn方法好，这个有待于验证。</li>
<li>2-dimensional CNN比1-dimensional CNN方法好</li>
<li>Matching scores can be used as features of learning to rank models，这个方法相当于可以融合不同方法得到的matching score，然后组成一个matching vector。</li>
</ul>
<h3 id="Ranking-Model"><a href="#Ranking-Model" class="headerlink" title="Ranking Model"></a>Ranking Model</h3><p>也就是大家熟知的Learning to Rank，不过我这里想解释的更加general一点，可能在构造训练集上和LTR有一些不同。</p>
<p>先说一下问题的定义，假设我有query <code>q</code>和候选的document集合<code>D={d1, d2, ..., dn}</code>。对于训练集，首先必须再次强调一下训练数据的形式：</p>
<ol>
<li>第一种形式，数据提供了某个query对应的完全的document的排序（或relevance值）；</li>
<li>第二种形式，数据只提供了某个query对应的一个或几个相关document，其他document并不知道相关性，具体类似推荐系统的数据。</li>
</ol>
<p>然后说一下LTR的输入，LTR接受Matching Model得到的结果，即可以使Matching Vector或者是Matching Score。</p>
<p>对于第一种形式的数据，可以采用传统的LTR方法：</p>
<ul>
<li>pointwise方法直接当做回归问题，可以看到Matching Score就可以看做是回归的值了，如果使用Matching Vector作为输入，相当于继续使用一些参数W做了一次回归问题。但其实这是可以通过神经网络end-to-end学习出来的，相当于整个网络（包括Representation Learning和Matching Model）的目标函数就是回归问题（损失函数为最小二乘）。</li>
<li>pairwise方法考虑了document集合中两两document的偏序关系，由此构造训练集。考虑所有两两的document，比如<code>d1</code>和<code>d2</code>，如果训练集中<code>d1 &gt; d2</code>，那么我们希望通过Matching Model得到的<code>d1</code>和<code>d2</code>对应的Matching Score <code>m1</code>要大于<code>m2</code>。在上面的intuition的指导下，我们可以定义不同的loss function了，最常见就是hinge loss function，也就是我们希望<code>m1</code>比<code>m2</code>要至少大于一个值，对应了SVM中的1，具体可以写成<code>max(0, theta - m1 + m2)</code>。这个Hinge Loss的定义方法其实就是RankSVM的方法，不过传统的RankSVM的定义使用了Matching Vector作为输入，比如<code>v1</code>和<code>v2</code>，并且重新构造了训练集，<code>v1 - v2</code>对应的label为<code>+1</code>（正类），<code>v2 - v1</code>对应的label为<code>-1</code>（负类）。大家可以看一下RankSVM的公式形式，不难会发现RankSVM和我这里表达的定义其实是等价的，感兴趣的同学可以参考<a href="http://www.cnblogs.com/kemaswill/p/3241963.html" target="_blank" rel="external">http://www.cnblogs.com/kemaswill/p/3241963.html</a>。其实，对于RankNet也是相同的道理，感兴趣的可以参考<a href="http://www.cnblogs.com/kemaswill/p/kemaswill.html" target="_blank" rel="external">http://www.cnblogs.com/kemaswill/p/kemaswill.html</a>。</li>
</ul>
<p>对于第二种形式的数据，训练数据中只提供了某个query对应的一个或几个相关document，其他document并不知道相关性。由于只提供了正反馈的数据，目前主流的做法就是进行contrastive sampling，也就是随机负采样。当有了负样本之后，相当于可以得到document之间的偏序关系了，就可以使用LTR的方法，这里面我倾向于称为ranking loss，也包括了pointwise和pairwise这两种方法：</p>
<ul>
<li>pointwise方法直接把问题当做二分类来做，正相关的document为正例，采样的负相关的数据为负例。如果接收Matching Score，可以在外面套一层sigmoid函数转化成概率，使用交叉熵损失函数进行训练；如果接收Matching Vector，相当可以再做一次logistics regression，但其实和前面方法是等价的。</li>
<li>pairwise方法是目前主流的做法，对一个query来说正相关的document偏序关系要大于这个query下随机采样的负相关的document，采样的个数可以作为一个超参数。这样可以使用和第一种数据形式的pairwise方法设计ranking loss了，这里不再赘述。一般文献里面都会使用hinge loss，表达示为<code>e(x, y_pos, y_neg) = max(0, theta - s_match(x, y_pos) + s_match(x, y_neg))</code>，其中<code>x</code>为query，<code>y_pos</code>为正相关document，<code>y_neg</code>为负相关document，<code>s_match</code>为Matching Model得到的Matching Score。</li>
</ul>
<h2 id="Deep-Learning-for-IR的具体应用"><a href="#Deep-Learning-for-IR的具体应用" class="headerlink" title="Deep Learning for IR的具体应用"></a>Deep Learning for IR的具体应用</h2><h3 id="Document-Retrieval"><a href="#Document-Retrieval" class="headerlink" title="Document Retrieval"></a>Document Retrieval</h3><p>这里考虑Learning to Rank for Document Retrieval，下图是整体的构架图，可以看到系统直接返回Ranking Model，相当于Matching Model和Ranking Model以一起学出来的。</p>
<p><img src="/assets/img/dl-ir/Document_Retrieval.png" alt="IR"></p>
<p>具体有一下几点考虑：</p>
<ul>
<li>simultaneously learn matching model and ranking model</li>
<li>Matching model: Projection into Latent Space, Using CNN</li>
<li>Ranking model: taking matching model output as features, as well as other features, Using DNN</li>
</ul>
<p>比较重要的就是Matching Model和Ranking Model的关系，下图直观的表示出来：</p>
<p><img src="/assets/img/dl-ir/Relation_between_Matching_Model_and_Ranking_Model.png" alt="IR"></p>
<p>其实，在我看来图中最后都会输出一个score，这个score就是matching score，而这个是最重要的。</p>
<p>下面给出一篇论文的网络结构图，这篇论文发表在sigir 2015，叫做<code>Learning to Rank Short Text Pairs with Convolutional Deep Neural Networks</code>，有兴趣的同学可以回去精读。</p>
<p><img src="/assets/img/dl-ir/sigir_2015.png" alt="IR"></p>
<p>首先，这篇论文使用了pointwise的方法，所以是一个二分类问题；使用CNN来对query和document学习representation；使用一个双线性函数来match query-vector和document-vector（<code>q_vec M d_vec</code>的内积）；之后与query-vector和document-vector或者加上其他feature一同连接成一个feature vector，这个就是Matching Vector；网络后几层经过若干fully connected层，最后会得到一个实数，就是Matching Score；由于是一个二分类问题，Matching Score外面套一层sigmoid函数转换成概率，使用交叉熵损失函数进行训练。</p>
<h3 id="Retrieval-based-Question-Answering"><a href="#Retrieval-based-Question-Answering" class="headerlink" title="Retrieval based Question Answering"></a>Retrieval based Question Answering</h3><p>Retrieval based QA其实和Document Retrieval没有什么区别，下图给出了一个整体的框架图：</p>
<p><img src="/assets/img/dl-ir/Retrieval_based_QA_System.png" alt="IR"></p>
<p>具体的一篇论文可以参考李航发表在nips 2015的文章，题目叫<code>Convolutional Neural Network Architectures for Matching Natural Language Sentences</code>。文中也是用了CNN来学习sentence的表示，但文中提出了两种Matching Model结构，一种是One Dimensional Matching，另一种是Two Dimensional Matching。分别表示如下图所示：</p>
<p><img src="/assets/img/dl-ir/NIPS_One_Dimensional_Matching.png" alt="IR"><br><img src="/assets/img/dl-ir/NIPS_Two_Dimensional_Matching.png" alt="IR"></p>
<p>最后Matching Model会生成一个Matching Score，正如我在这篇博文阐述的一样。</p>
<p>对于Ranking Model，也就是ranking loss，这篇文章使用了pairwise的方式，使用了hinge loss function，具体为：<code>e(x, y+, y−) = max(0, 1 + s(x, y−) − s(x, y+))</code>。其中，<code>y+</code>比<code>y-</code> match <code>x</code>的分数要高，也就是<code>y+</code>排在<code>y-</code>之前；<code>s(x, y)</code>是<code>x</code>和<code>y</code>的matching score。</p>
<h3 id="Image-Retrieval"><a href="#Image-Retrieval" class="headerlink" title="Image Retrieval"></a>Image Retrieval</h3><p>这个任务的意义是用文字来搜索图，反过来或者用图来搜索文字。一个整体的示意图如下：</p>
<p><img src="/assets/img/dl-ir/Image_Retrieval.png" alt="IR"></p>
<p>具体的一篇论文也是来自李航老师的，发表在ICCV 2016，题目叫作<code>Multimodal Convolutional Neural Networks for Matching Image and Sentence</code>。这篇论文使用了Multimodal CNN的方法，具体为：</p>
<ul>
<li>Represent text and image as vectors and then match the two vectors</li>
<li>三种matching方法：Word-level matching, phrase-level matching, sentence-level matching</li>
<li>CNN model works better than RNN models (state of the art) for text</li>
</ul>
<p>其中sentence-level matching和Word-level matching的示意图如下：</p>
<p><img src="/assets/img/dl-ir/Sentence_level_Matching.png" alt="IR"><br><img src="/assets/img/dl-ir/Word_level_Matching_Model.png" alt="IR"></p>
<p>最后网络会输出一个Matching Score，这篇文章也使用了pairwise方法，但是训练数据没有负相关样本，所以使用了随机负采样的方法；loss function选择了hinge loss，具体形式为<code>e_θ(xn, yn, ym) = max(0, theta − s_match(xn, yn) + s_match(xn, ym)</code>，其中<code>ym</code>是随机采样的负样本。</p>
<p>总结一下，可以看到，无论是Document Retrieval，Retrieval based Question Answering还是Image Retrieval，它们的模式都已一样的，都包括了三个基本要素：Representation Learning，Matching Model和Ranking Model。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文在于帮助梳理一下这种retrieve，match，similarity或者说recommend等一类问题的一些模式和关键要素，使点连成线，在大脑中构建真正的理解，能做到举一反三，遇到相似的任务能很自然的联想过去。大家如果有什么意见或想法，欢迎在下面留言。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>Convolutional Neural Network Architectures for Matching Natural Language Sentences, nips 2015</li>
<li>Learning to Rank Short Text Pairs with Convolutional Deep Neural Networks, sigir 2015</li>
<li>Multimodal Convolutional Neural Networks for Matching Image and Sentence, iccv 2016</li>
<li>TOWARDS UNIVERSAL PARAPHRASTIC SENTENCE, ICLR 2016</li>
<li>deep_learning_for_information_retrieval, sigir 2016 tutorial</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Huffman Tree (use priority queue) in C++]]></title>
      <url>http://pangolulu.github.io/2016/01/09/Huffman-Tree-use-priority-queue-in-C/</url>
      <content type="html"><![CDATA[<p>Use the priority queue to implement Huffman Tree, written in C++ and use STL.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">struct</span> Node * left;</div><div class="line">    <span class="keyword">struct</span> Node * right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node * p_Node;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> cmp</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(p_Node <span class="keyword">const</span> &amp;p1, p_Node <span class="keyword">const</span> &amp;p2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> p1-&gt;val &gt; p2-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">p_Node <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> val, p_Node left, p_Node right)</span></span></div><div class="line">&#123;</div><div class="line">    p_Node node = (p_Node)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    node-&gt;val = val;</div><div class="line">    node-&gt;left = left;</div><div class="line">    node-&gt;right = right;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">p_Node <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> * vec, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    priority_queue&lt;p_Node, <span class="built_in">vector</span>&lt;p_Node&gt;, cmp&gt; forest;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        p_Node node = createNode(vec[i], <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        forest.push(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(forest.size() &gt; <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        p_Node node1 =  forest.top();</div><div class="line">        forest.pop();</div><div class="line">        p_Node node2 =  forest.top();</div><div class="line">        forest.pop();</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;node1-&gt;val&lt;&lt;<span class="string">"  "</span>&lt;&lt;node2-&gt;val&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        p_Node new_node = createNode(node1-&gt;val + node2-&gt;val, node1, node2);</div><div class="line">        forest.push(new_node);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> forest.top();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Trie (in C)]]></title>
      <url>http://pangolulu.github.io/2016/01/09/Trie-in-C/</url>
      <content type="html"><![CDATA[<p>Trie树的解释参见：<br><a href="http://blog.csdn.net/hguisu/article/details/8131559" target="_blank" rel="external">http://blog.csdn.net/hguisu/article/details/8131559</a></p>
<p>下面是用C实现的代码</p>
<p>头文件：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TRIE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRIE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRIE_SIZE_DEF 128</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> TRIE_SIZE = TRIE_SIZE_DEF;</div><div class="line"></div><div class="line"><span class="keyword">union</span> NODE_TYPE</div><div class="line">&#123;</div><div class="line">    COMPLETED;</div><div class="line">    UNCOMPLETED;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node_</div><div class="line">&#123;</div><div class="line">    <span class="keyword">union</span> NODE_TYPE type;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">struct</span> Node_ *child[TRIE_SIZE];</div><div class="line">&#125;<span class="keyword">trie_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">trie_t</span> * trie_init(<span class="keyword">void</span>);</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">trie_add</span><span class="params">(<span class="keyword">trie_t</span> *trie, <span class="keyword">char</span> *word)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">trie_delete</span><span class="params">(<span class="keyword">trie_t</span> *trie, <span class="keyword">char</span> *word)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">trie_exists</span><span class="params">(<span class="keyword">trie_t</span> *trie, <span class="keyword">char</span> *word)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TRIE_H</span></span></div></pre></td></tr></table></figure>
<p>源文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">#include "trie.h"</div><div class="line"></div><div class="line">static trie_t * createNewNode(char ch)</div><div class="line">&#123;</div><div class="line">    trie_t *newNode = (trie_t *) malloc(sizeof(trie_t));</div><div class="line">    newNode-&gt;ch = ch;</div><div class="line">    newNode-&gt;type = UNCOMPLETED;</div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; TRIE_SIZE; i++)</div><div class="line">    &#123;</div><div class="line">        newNode-&gt;child[i] = NULL;</div><div class="line">    &#125;</div><div class="line">    return newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int char2int(char ch)</div><div class="line">&#123;</div><div class="line">    return ch - 'a';</div><div class="line">&#125;</div><div class="line"></div><div class="line">trie_t * trie_init(void)</div><div class="line">&#123;</div><div class="line">    return createNewNode('');</div><div class="line">&#125;</div><div class="line"></div><div class="line">void trie_add(trie_t *trie, char *word)</div><div class="line">&#123;</div><div class="line">    char ch;</div><div class="line">    while ((ch = *word++) != '\0')</div><div class="line">    &#123;</div><div class="line">        if (trie-&gt;child[char2int(ch)] == NULL)</div><div class="line">            trie-&gt;child[char2int(ch)] = createNewNode(ch);</div><div class="line">        trie = trie-&gt;child[char2int(ch)];</div><div class="line">    &#125;</div><div class="line">    trie-&gt;type =COMPLETED;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void trie_delete(trie_t *trie, char *word)</div><div class="line">&#123;</div><div class="line">    char ch;</div><div class="line">    while ((ch = *word++) != '\0')</div><div class="line">    &#123;</div><div class="line">        if (trie-&gt;child[char2int(ch)] == NULL)</div><div class="line">            return;</div><div class="line">        trie = trie-&gt;child[char2int(ch)];</div><div class="line">    &#125;</div><div class="line">    trie-&gt;type = UNCOMPLETED;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int trie_exists(trie_t *trie, char *word)</div><div class="line">&#123;</div><div class="line">    char ch;</div><div class="line">    while ((ch = *word++) != '\0')</div><div class="line">    &#123;</div><div class="line">        if (trie-&gt;child[char2int(ch)] == NULL)</div><div class="line">            return 0;</div><div class="line">        trie = trie-&gt;child[char2int(ch)];</div><div class="line">    &#125;</div><div class="line">    return (trie-&gt;tpye == COMPLETED) ? 1 : 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生成全排列算法（Scala和C++实现）]]></title>
      <url>http://pangolulu.github.io/2015/10/28/permutation/</url>
      <content type="html"><![CDATA[<p>全排列问题描述为：给定一串数字，生成所有可能的排列。<br>本文给出两类，一种使用C++通过回溯算法，一种使用Scala通过递归来求解。</p>
<p>首先介绍使用Scala通过递归求解的方法，定义递归关系：对<code>S</code>中的每个<code>x</code>，递归的生成<code>S-x</code>的所有排列的序列，而后将<code>x</code>加到每个序列的前面。这样就能对<code>S</code>里的每个<code>x</code>，产生出了<code>S</code>的所有以<code>x</code>开头的排列。合起来就是所有的排列了。<br>实现的代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span></span>(xs: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">Set</span>[<span class="type">List</span>[<span class="type">Int</span>]] =</div><div class="line">  <span class="keyword">if</span> (xs == <span class="type">Nil</span>) <span class="type">Set</span>(<span class="type">Nil</span>)</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">      i &lt;- xs.indices</div><div class="line">      ys &lt;- func(xs filter (_ != xs(i)))</div><div class="line">    &#125;   <span class="keyword">yield</span> xs(i) :: ys</div><div class="line">  &#125;.toSet</div><div class="line"></div><div class="line">func(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div></pre></td></tr></table></figure></p>
<p>使用回溯法的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == vec.size()) &#123;</div><div class="line">        for_each(vec.begin(), vec.end(), [](<span class="keyword">int</span> v) &#123; <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">" "</span>; &#125;);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt; vec.size(); i++) &#123;</div><div class="line">        swap(vec[s], vec[i]);</div><div class="line">        func(vec, s+<span class="number">1</span>);</div><div class="line">        swap(vec[s], vec[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，函数参数<code>s</code>表示的是当前序列已经有多少位完成了排列，即前<code>s</code>位完成了排列，当前正在对第<code>s</code>位进行排列。取所有<code>s</code>到<code>size - 1</code>位置的元素作为第<code>s</code>位的数字。回溯的意义是在执行完递归<code>func(vec, s+1);</code>后，需要将之前交换过的元素交换回来，即需要将数组回复原状。</p>
<p>综上，觉得使用Scala的递归思想考虑还是比较简单的，但效率不敢恭维。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cousera响应式编程 - Functions and Pattern Matching]]></title>
      <url>http://pangolulu.github.io/2015/10/27/Functions-and-Pattern-Matching/</url>
      <content type="html"><![CDATA[<p>本文是Week 1.2，这一节主要回顾了函数式编程语言中的function和pattern matching的知识，通过回顾了这一知识，你将会发现Scala等函数是编程语言的表达能力是如此之强。</p>
<h4 id="Case-Class"><a href="#Case-Class" class="headerlink" title="Case Class"></a>Case Class</h4><p>当要定义复杂的数据类型时，可以使用Case classes。如下面所示，定义一个JSON数据表示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;   </div><div class="line">	“firstName”: “John”,</div><div class="line">	“lastName”: “Smith”,</div><div class="line">	“address”: &#123;</div><div class="line">		“streetAddress”: “21 2 nd Street”,</div><div class="line">		“state”: “NY”,</div><div class="line">		“postalCode”: 10021</div><div class="line">	&#125;,</div><div class="line">	“phoneNumbers”: [</div><div class="line">		&#123; “type”: “home”, “number”: “212 555 -1234” &#125;,</div><div class="line">		&#123; “type”: “fax”, “number”: “646 555 -4567” &#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过Scala的case class可以抽象为：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JSeq</span> (<span class="params">elems: <span class="type">List</span>[<span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JObj</span> (<span class="params">bindings: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JNum</span> (<span class="params">num: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JStr</span> (<span class="params">str: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JBool</span>(<span class="params">b: <span class="type">Boolean</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">JNull</span> <span class="keyword">extends</span> <span class="title">JSON</span></span></div></pre></td></tr></table></figure></p>
<p>所以，可以定义上面的JSON变量为：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> data = <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">  <span class="string">"firstName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"John"</span>),</div><div class="line">  <span class="string">"lastName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"Smith"</span>),</div><div class="line">  <span class="string">"address"</span> -&gt; <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">    <span class="string">"streetAddress"</span> -&gt; <span class="type">JStr</span>(<span class="string">"21 2nd Street"</span>),</div><div class="line">    <span class="string">"state"</span> -&gt; <span class="type">JStr</span>(<span class="string">"NY"</span>),</div><div class="line">    <span class="string">"postalCode"</span> -&gt; <span class="type">JNum</span>(<span class="number">10021</span>)</div><div class="line">  )),</div><div class="line">  <span class="string">"phoneNumbers"</span> -&gt; <span class="type">JSeq</span>(<span class="type">List</span>(</div><div class="line">    <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">      <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"home"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"212 555-1234"</span>)</div><div class="line">    )),</div><div class="line">    <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">      <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"fax"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"646 555-4567"</span>)</div><div class="line">    )) )) ))</div></pre></td></tr></table></figure></p>
<h4 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h4><p>如果我们想要用JSON的格式进行打印要怎么做呢？Scala提供的Pattern Matching语法可以非常方便和优雅的写出递归语法。如下定义了打印函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>: <span class="type">String</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">JSeq</span>(elems) =&gt; <span class="string">"["</span> + (elems map (_.show) mkString <span class="string">", "</span>) + <span class="string">"]"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JObj</span>(bindings) =&gt;</div><div class="line">      <span class="keyword">val</span> assocs = bindings map &#123;</div><div class="line">        <span class="keyword">case</span> (key, value) =&gt; <span class="string">"\""</span> + key + <span class="string">"\": "</span> + value.show</div><div class="line">      &#125;</div><div class="line">      <span class="string">"&#123;"</span> + (assocs mkString <span class="string">", "</span>) + <span class="string">"&#125;"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JNum</span>(num) =&gt; num.toString</div><div class="line">    <span class="keyword">case</span> <span class="type">JStr</span>(str) =&gt; <span class="string">"\""</span> + str + <span class="string">"\""</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JBool</span>(b) =&gt; b.toString</div><div class="line">    <span class="keyword">case</span> <span class="type">JNull</span> =&gt; <span class="string">"null"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>有一个地方需要讨论一下，以下<code>pattern matching</code>代码块中返回的类型是什么？<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="keyword">case</span> (key, value) =&gt; key + ”: ” + value &#125;</div></pre></td></tr></table></figure></p>
<p>在前面的打印代码中，<code>map</code>函数需要的参数类型是<code>JBinding =&gt; String</code>的函数类型，其中<code>JBinding</code>是<code>String</code>和<code>JSON</code>的<code>pair</code>，也就是<code>type JBinding = (String, JSON)</code>。<br>Scala也是一门面向对象语言，其中所有具体的类型都是一种<code>class</code>或<code>trait</code>。函数类型也不例外，比如说<code>JBinding =&gt; String</code>的类型其实是<code>Function1[JBinding, String]</code>，其中<code>Function1</code>是一个<code>trait</code>，<code>JBinding</code>和<code>String</code>是类型参数。<br>下面是<code>trait Function1</code>的大体表示：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[-<span class="type">A</span>, +<span class="type">R</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">A</span>): <span class="type">R</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>[-A, +R]</code>表示的是范型中的逆变和协变，以后会在其它文章中介绍。<br>综上，上面的<code>pattern matching</code>代码块其实是一个<code>Function1</code>类型的实例，即：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">JBinding</span>, <span class="type">String</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">JBinding</span>) = x <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> (key, value) =&gt; key + ”: ” + show(value)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将函数定义成<code>trait</code>的好处是我们可以继承函数类型。<br>例如Scala中的<code>Map</code>类型继承了函数类型，如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Map</span>[<span class="type">Key</span>, <span class="type">Value</span>] <span class="keyword">extends</span> (<span class="params"><span class="type">Key</span> =&gt; <span class="type">Value</span></span>)</span></div></pre></td></tr></table></figure></p>
<p>就能通过<code>map(key)</code>的形式，也就是函数调用来由key得到value。<br>Scala中的Sequences也是继承了函数类型，如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Seq</span>[<span class="type">Elem</span>] <span class="keyword">extends</span> (<span class="params"><span class="type">Int</span> =&gt; <span class="type">Elem</span></span>)</span></div></pre></td></tr></table></figure></p>
<p>所以可以通过<code>elems(i)</code>的形式来由序列的下表访问对应的元素。</p>
<h4 id="Partial-Matches"><a href="#Partial-Matches" class="headerlink" title="Partial Matches"></a>Partial Matches</h4><p>通过上面的知识可以知道，下面的<code>pattern matching</code>代码块，<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>可以得到一个<code>String =&gt; String</code>的函数类型，即：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f: <span class="type">String</span> =&gt; <span class="type">String</span> = &#123; <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>但是如果调用<code>f(”pong”)</code>将会返回<code>MatchError</code>的异常，这显而易见。那么问题来了，“Is there a way to find out whether the function can be applied to a given argument before running it?”<br>在Scala中可以这么解决，定义<code>PartialFunction</code>，如下所示：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">String</span>] = &#123; <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span> &#125;</div><div class="line">f.isDefinedAt(<span class="string">"ping"</span>) <span class="comment">// true</span></div><div class="line">f.isDefinedAt(<span class="string">"pong"</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p><code>PartialFunction</code>和<code>Function</code>的区别就是<code>PartialFunction</code>定义了<code>isDefinedAt</code>函数。如果我们定义<code>{ case &quot;ping&quot; =&gt; &quot;pong&quot; }</code>是一个<code>PartialFunction</code>类型，那么Scala编译器将会展开为：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">String</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">String</span>) = x <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">String</span>) = x <span class="keyword">match</span> &#123;</div><div class="line">   <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="literal">true</span></div><div class="line">   <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这一节中表达JSON数据格式的例子非常有趣，我把完整的代码放在下面，Scala的代码非常简洁。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>: <span class="type">String</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">JSeq</span>(elems) =&gt; <span class="string">"["</span> + (elems map (_.show) mkString <span class="string">", "</span>) + <span class="string">"]"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JObj</span>(bindings) =&gt;</div><div class="line">      <span class="keyword">val</span> assocs = bindings map &#123;</div><div class="line">        <span class="keyword">case</span> (key, value) =&gt; <span class="string">"\""</span> + key + <span class="string">"\": "</span> + value.show</div><div class="line">      &#125;</div><div class="line">      <span class="string">"&#123;"</span> + (assocs mkString <span class="string">", "</span>) + <span class="string">"&#125;"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JNum</span>(num) =&gt; num.toString</div><div class="line">    <span class="keyword">case</span> <span class="type">JStr</span>(str) =&gt; <span class="string">"\""</span> + str + <span class="string">"\""</span></div><div class="line">    <span class="keyword">case</span> <span class="type">JBool</span>(b) =&gt; b.toString</div><div class="line">    <span class="keyword">case</span> <span class="type">JNull</span> =&gt; <span class="string">"null"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JSeq</span>(<span class="params">elems: <span class="type">List</span>[<span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JObj</span>(<span class="params">bindings: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JNum</span>(<span class="params">num: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JStr</span>(<span class="params">str: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">JBool</span>(<span class="params">b: <span class="type">Boolean</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">JNull</span> <span class="keyword">extends</span> <span class="title">JSON</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    <span class="keyword">val</span> data = <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">      <span class="string">"firstName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"Yu"</span>),</div><div class="line">      <span class="string">"lastName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"Gong"</span>),</div><div class="line">      <span class="string">"address"</span> -&gt; <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">        <span class="string">"streetAddress"</span> -&gt; <span class="type">JStr</span>(<span class="string">"NY"</span>),</div><div class="line">        <span class="string">"state"</span> -&gt; <span class="type">JStr</span>(<span class="string">"NY"</span>)</div><div class="line">      )),</div><div class="line">      <span class="string">"phoneNumbers"</span> -&gt; <span class="type">JSeq</span>(<span class="type">List</span>(</div><div class="line">        <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">          <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"home"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"12233"</span>)</div><div class="line">        )),</div><div class="line">        <span class="type">JObj</span>(<span class="type">Map</span>(</div><div class="line">          <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"fax"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"22222"</span>)</div><div class="line">        ))</div><div class="line">      ))</div><div class="line">    ))</div><div class="line"></div><div class="line">    println(data.show)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>稍微思考一下，如果用传统的面向对象语言（比如Java）来对JSON数据格式进行抽象，可以如何定义呢？<br>也可以定义基类<code>JSON</code>和子类<code>JSeq JObj JNum JStr JBool JNull</code>，如果要实现打印函数，可能就需要在每个子类中实现自己的打印函数，也就是写六个<code>show</code>函数。<br>如果你有什么想法和思考，欢迎前来讨论。</p>
]]></content>
    </entry>
    
  
  
</search>
